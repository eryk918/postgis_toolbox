# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PostGISToolbox
                                 A QGIS plugin
 Plugin for QGIS implementing selected PostGIS spatial functions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-05-12
        copyright            : (C) 2022 by Eryk Chełchowski
        email                : erwinek1998@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Eryk Chełchowski'
__date__ = '2022-05-12'
__copyright__ = '(C) 2022 by Eryk Chełchowski'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import inspect
import os
import sys

from qgis.PyQt.QtCore import QSettings, QCoreApplication, qVersion, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsApplication
from qgis.utils import iface

from .utils import tr
from .postgis_toolbox_provider import PostGISToolboxProvider

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)


class PostGISToolboxPlugin(object):

    def __init__(self):
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.provider = None
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'pgtoolbox_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            translator = QTranslator()
            translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(translator)

        # self.dlg
        # self.dlg_settings

        self.actions = []
        self.menu = tr('&PostGIS Toolbox')
        self.toolbar = self.iface.addToolBar('PostGIS Toolbox')
        self.toolbar.setObjectName('PostGIS Toolbox')

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = PostGISToolboxProvider(self)
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        self.initProcessing()

        # icon_path = ':/plugins/postgis_toolbox/icon.png'
        icon_path = ''
        self.add_action(
            icon_path,
            text=tr('PostGIS Toolbox'),
            callback=self.run_menu,
            parent=self.iface.mainWindow())

        # icon_path_settings = ':/plugins/postgis_toolbox/icon_settings.png'
        icon_path_settings = ''
        self.add_action(
            icon_path_settings,
            text=tr(u'Settings'),
            callback=self.run_settings,
            add_to_menu=True,
            add_to_toolbar=False,
            parent=self.iface.mainWindow())

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                tr('&PostGIS Toolbox'),
                action)
            self.iface.removeToolBarIcon(action)
        del self.toolbar

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def run_menu(self):
        pass

    def run_settings(self):
        pass
